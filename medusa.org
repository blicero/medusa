# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2025-05-02 21:35:21 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Medusa [0/0]
  An application to gather various metrics on hosts (e.g. CPU frequency,
  temperature, utilization, system load) and hopefully make pretty graphs out
  of that data.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 255 :emphasize t
   #+CAPTION: Clock summary at [2025-05-02 Fr 21:35]
   | Headline               | Time      |           |       |       |
   |------------------------+-----------+-----------+-------+-------|
   | *Total time*           | *1d 2:21* |           |       |       |
   |------------------------+-----------+-----------+-------+-------|
   | *Medusa [0/0]*         | *1d 2:21* |           |       |       |
   | \_  /Components [0/0]/ |           | /1d 2:21/ |       |       |
   | \_    Probes [0/0]     |           |           |  2:31 |       |
   | \_    Model [0/0]      |           |           |  2:17 |       |
   | \_    Database [1/2]   |           |           |  1:36 |       |
   | \_      Pool           |           |           |       |  0:28 |
   | \_    Server [1/2]     |           |           | 19:57 |       |
   | \_      Protocol       |           |           |       | 11:10 |
   #+END:
** Features [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Components [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Probes [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-01-26 Fr 15:00]--[2024-01-26 Fr 16:39] =>  1:39
    CLOCK: [2024-01-25 Do 17:58]--[2024-01-25 Do 18:50] =>  0:52
    :END:
*** Model [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-22 Di 18:17]--[2025-04-22 Di 18:51] =>  0:34
    CLOCK: [2025-04-21 Mo 13:31]--[2025-04-21 Mo 15:14] =>  1:43
    :END:
*** Database [1/2]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-22 Di 18:51]--[2025-04-22 Di 19:04] =>  0:13
    CLOCK: [2025-04-22 Di 18:17]--[2025-04-22 Di 18:17] =>  0:00
    CLOCK: [2025-04-22 Di 14:23]--[2025-04-22 Di 15:18] =>  0:55
    :END:
**** TODO Exception handling
**** DONE Pool
     CLOSED: [2025-04-29 Di 20:40]
     :LOGBOOK:
     CLOCK: [2025-04-24 Do 18:43]--[2025-04-24 Do 19:11] =>  0:28
     :END:
     I want a connection pool, similar to what I created in Go.
     And I want it to be a context manager, so I can say something like
     #+BEGIN_SRC Python
       with db_pool.get() as db:
           db.do_something(blah)
     #+END_SRC
     such that the the database instance will be returned to the pool on exit
     from the block.
     ...
     [2025-04-24 Do 19:06]
     After looking into this a bit, I think it is too much, I don't need it.
     The context manager part, I mean.
*** Server [1/2]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-24 Do 17:33]--[2025-04-24 Do 18:42] =>  1:09
    CLOCK: [2025-04-23 Mi 21:15]--[2025-04-23 Mi 21:40] =>  0:25
    CLOCK: [2025-04-23 Mi 17:45]--[2025-04-23 Mi 20:18] =>  2:33
    CLOCK: [2025-04-23 Mi 16:55]--[2025-04-23 Mi 16:59] =>  0:04
    CLOCK: [2025-04-22 Di 20:03]--[2025-04-23 Mi 00:39] =>  4:36
    :END:
**** TODO Protocol
     :LOGBOOK:
     CLOCK: [2025-05-02 Fr 21:22]--[2025-05-02 Fr 21:35] =>  0:13
     CLOCK: [2025-05-02 Fr 18:00]--[2025-05-02 Fr 19:00] =>  1:00
     CLOCK: [2025-05-02 Fr 16:21]--[2025-05-02 Fr 17:34] =>  1:13
     CLOCK: [2025-04-30 Mi 17:16]--[2025-04-30 Mi 22:58] =>  5:42
     CLOCK: [2025-04-29 Di 17:59]--[2025-04-29 Di 18:51] =>  0:52
     CLOCK: [2025-04-27 So 19:24]--[2025-04-27 So 21:34] =>  2:10
     :END:
     I think I should use TCP and model the agent-server-interaction using
     state machines. I've wanted to play with that anyway, so now I have an
     excuse.
**** SUSPENDED mDNS
     CLOSED: [2025-04-30 Mi 17:29]
     Every time, so far, I've dealt with mDNS, it either didn't work out, or
     the payoff was much, much lower than what I had hoped for.
     So for the time being, I'll shelve this idea.
*** Agent [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
** Refactor [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
