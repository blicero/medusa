# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2025-05-06 23:19:33 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Medusa [5/6]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
  An application to gather various metrics on hosts (e.g. CPU frequency,
  temperature, utilization, system load) and hopefully make pretty graphs out
  of that data.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 255 :emphasize t
   #+CAPTION: Clock summary at [2025-05-06 Di 23:19]
   | Headline                     | Time       |            |         |       |
   |------------------------------+------------+------------+---------+-------|
   | *Total time*                 | *1d 13:41* |            |         |       |
   |------------------------------+------------+------------+---------+-------|
   | *Medusa [5/6]*               | *1d 13:41* |            |         |       |
   | \_  /Components [5/6]/       |            | /1d 13:41/ |         |       |
   | \_    Probes [0/0]           |            |            |    2:31 |       |
   | \_    Model [0/0]            |            |            |    2:17 |       |
   | \_    Database [2/2]         |            |            |    1:45 |       |
   | \_      Exception handling   |            |            |         |  0:09 |
   | \_      Pool                 |            |            |         |  0:28 |
   | \_    Server [3/4]           |            |            | 1d 7:08 |       |
   | \_      Web Interface [0/0]  |            |            |         |  7:44 |
   | \_      Error Handling [0/0] |            |            |         |  0:58 |
   | \_      Protocol             |            |            |         | 13:39 |
   #+END:
** Features [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Components [5/6]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Probes [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-01-26 Fr 15:00]--[2024-01-26 Fr 16:39] =>  1:39
    CLOCK: [2024-01-25 Do 17:58]--[2024-01-25 Do 18:50] =>  0:52
    :END:
*** Model [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-22 Di 18:17]--[2025-04-22 Di 18:51] =>  0:34
    CLOCK: [2025-04-21 Mo 13:31]--[2025-04-21 Mo 15:14] =>  1:43
    :END:
*** Database [2/2]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-22 Di 18:51]--[2025-04-22 Di 19:04] =>  0:13
    CLOCK: [2025-04-22 Di 18:17]--[2025-04-22 Di 18:17] =>  0:00
    CLOCK: [2025-04-22 Di 14:23]--[2025-04-22 Di 15:18] =>  0:55
    :END:
**** DONE Exception handling
     CLOSED: [2025-05-05 Mo 17:57]
     :LOGBOOK:
     CLOCK: [2025-05-05 Mo 17:48]--[2025-05-05 Mo 17:57] =>  0:09
     :END:
**** DONE Pool
     CLOSED: [2025-04-29 Di 20:40]
     :LOGBOOK:
     CLOCK: [2025-04-24 Do 18:43]--[2025-04-24 Do 19:11] =>  0:28
     :END:
     I want a connection pool, similar to what I created in Go.
     And I want it to be a context manager, so I can say something like
     #+BEGIN_SRC Python
       with db_pool.get() as db:
           db.do_something(blah)
     #+END_SRC
     such that the the database instance will be returned to the pool on exit
     from the block.
     ...
     [2025-04-24 Do 19:06]
     After looking into this a bit, I think it is too much, I don't need it.
     The context manager part, I mean.
     [2025-05-06 Di 15:05]
     Also, sqlite3 connections only work in the thread that created them, so
     the whole concept of a Pool doesn't work.
*** Server [3/4]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2025-04-24 Do 17:33]--[2025-04-24 Do 18:42] =>  1:09
    CLOCK: [2025-04-23 Mi 21:15]--[2025-04-23 Mi 21:40] =>  0:25
    CLOCK: [2025-04-23 Mi 17:45]--[2025-04-23 Mi 20:18] =>  2:33
    CLOCK: [2025-04-23 Mi 16:55]--[2025-04-23 Mi 16:59] =>  0:04
    CLOCK: [2025-04-22 Di 20:03]--[2025-04-23 Mi 00:39] =>  4:36
    :END:
**** TODO Web Interface [0/0]
     :PROPERTIES:
     :COOKIE_DATA: todo recursive
     :VISIBILITY: children
     :END:
     :LOGBOOK:
     CLOCK: [2025-05-06 Di 18:55]--[2025-05-06 Di 23:18] =>  4:23
     CLOCK: [2025-05-06 Di 18:12]--[2025-05-06 Di 18:33] =>  0:21
     CLOCK: [2025-05-06 Di 15:06]--[2025-05-06 Di 15:31] =>  0:25
     CLOCK: [2025-05-06 Di 14:44]--[2025-05-06 Di 14:59] =>  0:15
     CLOCK: [2025-05-06 Di 10:16]--[2025-05-06 Di 10:24] =>  0:08
     CLOCK: [2025-05-05 Mo 21:02]--[2025-05-05 Mo 22:42] =>  1:40
     CLOCK: [2025-05-05 Mo 20:02]--[2025-05-05 Mo 20:34] =>  0:32
     :END:
     I am looking into Bottle first, which I have never used, but it sounds
     nice.
     For templating, I'll use [[https://jinja.palletsprojects.com/en/stable/][Jinja]].
     [2025-05-06 Di 18:12]
     *Update* So far both Bottle and Jinja2 are very pleasant to use.
     [2025-05-06 Di 23:18]
     *Update* For graphs, I will be using matplotlib, probably.
**** DONE Error Handling [0/0]
     CLOSED: [2025-05-05 Mo 20:00]
     :PROPERTIES:
     :COOKIE_DATA: todo recursive
     :VISIBILITY: children
     :END:
     :LOGBOOK:
     CLOCK: [2025-05-05 Mo 18:01]--[2025-05-05 Mo 18:59] =>  0:58
     :END:
**** DONE Protocol
     CLOSED: [2025-05-05 Mo 17:00]
     :LOGBOOK:
     CLOCK: [2025-05-03 Sa 21:40]--[2025-05-03 Sa 23:31] =>  1:51
     CLOCK: [2025-05-03 Sa 20:55]--[2025-05-03 Sa 21:33] =>  0:38
     CLOCK: [2025-05-02 Fr 21:22]--[2025-05-02 Fr 21:35] =>  0:13
     CLOCK: [2025-05-02 Fr 18:00]--[2025-05-02 Fr 19:00] =>  1:00
     CLOCK: [2025-05-02 Fr 16:21]--[2025-05-02 Fr 17:34] =>  1:13
     CLOCK: [2025-04-30 Mi 17:16]--[2025-04-30 Mi 22:58] =>  5:42
     CLOCK: [2025-04-29 Di 17:59]--[2025-04-29 Di 18:51] =>  0:52
     CLOCK: [2025-04-27 So 19:24]--[2025-04-27 So 21:34] =>  2:10
     :END:
     I think I should use TCP and model the agent-server-interaction using
     state machines. I've wanted to play with that anyway, so now I have an
     excuse.

     [2025-05-03 Sa 20:00]
     It doesn't work quite as I had intended. I think I need to look into
     asyncore or its successor.
     ...
     Oh my, asyncore doesn't exist any longer, asyncio seems a bit much.
**** SUSPENDED mDNS
     CLOSED: [2025-04-30 Mi 17:29]
     Every time, so far, I've dealt with mDNS, it either didn't work out, or
     the payoff was much, much lower than what I had hoped for.
     So for the time being, I'll shelve this idea.
*** Agent [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
** Refactor [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
